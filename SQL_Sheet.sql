/*---------------【目次】---------------
■テーブルの作成
■データの挿入（INSERT）
■フィールドの更新（UPDATE）
■レコードの削除（DELETE）
■テーブルの仕様変更（ALTER TABLE）
  ・カラムの追加（ADD）
  ・カラム名の変更（RENAME COLUMN）
  ・カラム定義オプションの変更（MODIFY）
  ・全カラム情報の変更（CHANGE）
■テ－ブルの削除（DROP）
■テ－ブル内全レコードの削除（TRUNCATE）
■SELECT基本
  ・全件抽出
  ・別名で抽出
■WHERE句
■処理順 
--------------------------------------*/





/*================================================================================================

  テーブルの作成 

================================================================================================*/
CREATE TABLE テーブル名(                     -- テーブル名
  カラム名（必須）, データ型, オプション, -- カラム（1列目の情報）
  カラム名（必須）, データ型, オプション, -- カラム（2列目の情報）
  カラム名（必須）, データ型, オプション, -- カラム（3列目の情報）
  カラム名（必須）, データ型, オプション  -- カラム（4列目の情報）
);

CREATE TABLE sample(
  ID,       INT,         NOT NULL PRIMARY KEY    COMMENT "コメント",
  Name,     VARCHAR(30), NOT NULL                COMMENT "コメント",
  Gender,   CHAR(1),                             COMMENT "コメント",
  Weight,   DECIMAL,                             COMMENT "コメント",
  Birthday, DATE,        NOT NULL DEFAULT notset COMMENT "コメント"
);

-- 【型について】
--  INT           → 整数
--  DECIMAL(m, d) → 小数点を取り扱う型　※括弧内「m」は表示件数、「d」は少数行桁数
--  CHAR(n)       → 固定長文字列 ※括弧内は最大文字数
--  VARCHAR(n)    → 可変長文字列 ※括弧内は最大文字数
--  DATE          → 年月日
--  DATETIME      → 年月日＋時刻

-- 【オプションについて】
--  NOT NULL    → このカラムへのNULL値の入力不可
--  PRIMARY KEY → このカラムを主キーに設定      
--  DEFAULT     → 何も入力がなかった時に自動で入力する値を設定      
--  COMMENT     → カラムごとにコメントを残す      





/*================================================================================================

  データの挿入（INSERT）

================================================================================================*/
INSERT INTO sample ( iD, Name,    Gender, Weight, Birthday     )
            values ( 1 , "Mike" , "男"  , 65.8  , "2021-09-20" );

-- CAHR, DATE型は「""」を入れること
-- NOT NULL制約がある場合は必ず値をいれる
-- NOT NULL制約が無い場合は空でも可能

-- これはNG ↓↓↓
INSERT INTO sample ( iD, Name,    Gender, Weight, Birthday     )
            values ( 1 , "Mike" , "男"  , 65.8  , "2021-09-20" )
            values ( 2 , "Mike" , "男"  , 65.8  , "2021-09-20" )
            values ( 3 , "Mike" , "男"  , 65.8  , "2021-09-20" )
            values ( 4 , "Mike" , "男"  , 65.8  , "2021-09-20" )
            values ( 5 , "Mike" , "男"  , 65.8  , "2021-09-20" );





/*================================================================================================

  フィールドの更新（UPDATE）

================================================================================================*/

UPDATE テーブル名                        -- どのテーブルの               
  SET 対象カラム名 = 更新するデータ      -- 何に変更 
  WHERE 対象カラム名 = 更新されるデータ; -- どこを

UPDATE SAMPLE         -- SAMPLEテーブルの
  SET name= "非公開"  -- 「非公開」に変更する
  WHERE name is NULL; -- NULLが入ているフィールドを

-- ※「NULL」の場合は「is」、文字列・数字の場合は「=」を使用する事





/*================================================================================================

  レコードの削除（DELETE）

================================================================================================*/

DELETE FROM sample -- ssampleテーブルの
  WHERE ID = 1;    -- IDが「1」の行を削除する

DELETE FROM sample ; -- ssampleテーブルのデータを全削除






/*================================================================================================

  テーブルの仕様変更（ALTER TABLE）

================================================================================================*/

--  下記テーブルの情報を変更・修正する ↓↓↓
CREATE TABLE sample(
  ID,       INT,         NOT NULL PRIMARY KEY    COMMENT "コメント",
  Name,     VARCHAR(30), NOT NULL                COMMENT "コメント",
  Gender,   CHAR(1),                             COMMENT "コメント",
  Weight,   DECIMAL,                             COMMENT "コメント",
  Birthday, DATE,        NOT NULL DEFAULT notset COMMENT "コメント"
);


/*  カラムの追加（ADD）
============================================================================================*/

-- 最後尾に追加
ALTER TABLE テーブル名
  ADD 追加したいカラム名, データ型, オプション;

ALTER TABLE sample
  ADD Skill, VARCHAR(20), NOT NULL DEFAULT "未定義";

-- 先頭に追加
ALTER TABLE テーブル名
  ADD 追加したいカラム名, データ型, オプション FIRST;

ALTER TABLE sample
  ADD Skill, VARCHAR(20), NOT NULL DEFAULT "未定義" FIRST;

-- 特定の場所に追加
ALTER TABLE テーブル名
  ADD 追加したいカラム名, データ型, オプション AFTER 既存カラム名;

ALTER TABLE sample
  ADD Skill, VARCHAR(20), NOT NULL DEFAULT "未定義" AFTER Birthday;


/*  カラム名の変更（RENAME COLUMN）
============================================================================================*/
ALTER TABLE テーブル名                            -- どのテーブルの
  RENAME COLUMN 対象カラム名 to 変更するカラム名; -- 何を何に変更

ALTER TABLE SAMPLE 
  RENAME COLUMN name to age;


/*  カラム定義オプションの変更（MODIFY）
============================================================================================*/
ALTER TABLE テーブル名                       -- どのテーブルの
  MODIFY 対象カラム名 変更後のカラム定義; -- 何を何に変更

ALTER TABLE SAMPLE
  MODIFY name DATE NOT NULL;


/*  全カラム情報の変更（CHANGE）
============================================================================================*/
ALTER TABLE テーブル名                       -- どのテーブルの
  CHANGE 対象カラム名 変更するカラム名 変更後のカラム定義; -- 何を何に変更

ALTER TABLE SAMPLE
  CHANGE name DATE NOT NULL;





/*================================================================================================

  テ－ブル内全レコードの削除（TRUNCATE）

================================================================================================*/

TRUNCATE sample ;

-- 【TRUNCATE】
-- ・全件削除しかできない
-- ・処理スピードが速い
-- ・DDL（データ定義言語）
-- ・やりなおし（ROLLBACK）できない
-- ・DROP権限が必要
-- ・ログや処理情報が残らない

-- 【DELETE】
-- ・条件付き削除が可能
-- ・処理スピードが遅い
-- ・DML（データ操作言語）
-- ・やりなおし（ROLLBACK）できる
-- ・DELETE権限が必要
-- ・ログや処理情報が残る





/*================================================================================================

  テ－ブルの完全削除（DROP）

================================================================================================*/
DROP TABLE sample ;





/*================================================================================================

  SELECT基本

================================================================================================*/

/*  基本構文
============================================================================================*/
SELECT ID, Name, Age, Birthday ; -- どのカラムのデータを抽出するか
  FROM sample ;                  -- どのテーブルから

/*  全件抽出
============================================================================================*/
SELECT * ;
  FROM sample ;                 

/*  別名で抽出
============================================================================================*/
SELECT ID       AS NewID,
       Name     AS NewName,
       Age      AS NewAge,
       Birthday AS NewBirthday ;
FROM sample ;

-- ひらがな、カタカナ、漢字設定可能






/*================================================================================================

  WHERE句

================================================================================================*/

/*  基本構文
============================================================================================*/
SELECT ID, Name, Age, Weight, Birthday ; -- どのカラムのデータを抽出するか
  FROM sample ;                          -- どのテーブルから
WHERE Age < 5
  AND Weight > 6.5 ;                 -- どの行の

/*  WHERE句で使用する論理演算子
============================================================================================*/
BETWEEN 値a = AND 値b      -- 値a以上、値b以下であればTRUE
name IN("a", "b", "c")     --「nameが “a” , ”b” , ”c”のいずれかであれば抽出」という条件
name NOT IN("a", "b", "c") --「nameが “a” , ”b” , ”c”出ないものを抽出」という条件
name LIKE "a%"             -- name “a”から始まっていれば抽出」という条件
name LIKE "%a"             -- name “a”終わっていれば抽出」という条件
name LIKE "%a%"            -- name “a”が含まれていれば抽出」という条件

/*  論理演算子の優先順位
============================================================================================*/
NOT > AND > OR






/*================================================================================================

  GROUP BY

================================================================================================*/





/*================================================================================================

  テーブル結合（内部）

================================================================================================*/

/*  INNER JOIN
============================================================================================*/
SELECT a.home_ID, b.pet_NAME, b.pet_age   -- どのデータを抽出するか
    FROM sample01 a INNER JOIN sample02 b -- sample01とsample02を結びつける
    ON a.ID = b.PET_ID;                   -- 結びつける結合キーを定義
WHERE b.pet_age < 5                　　　  -- 絞り込み
ORDER BY a.home_ID;                       -- ホームIDを昇順で並び替え






/*================================================================================================

  条件分岐

================================================================================================*/

/*  CASE
============================================================================================*/
SELECT
  CASE
      WHEN [条件] THEN [条件を満たしたら表示する内容]
      ELSE [条件を満たしていなかったら表示する内容]
  END
FROM [テーブル名];





/*================================================================================================

  処理順 

================================================================================================*/
SELECT SCHOOL_NAME AS SCHOOL_NAME,                          -- 6.どのカラムのデータを抽出して
       MAX(SCORE)  AS HIGH_SCORE,                           -- 4.関数を動かし
       AVG(SCORE)  AS AVERAGE_SCORE                         -- 4.関数を動かし
FROM SAMPLE_4_4                                             -- 1.どのテーブルの
WHERE SCHOOL_NAME IS NOT NULL                               -- 2.どの行を
GROUP BY SCHOOL_NAME                                        -- 3.どの集約キーでグループ化して データ表を作り
HAVING COUNT(*) >= 3                                        -- 5.どの行の（グループ化後の絞り込み）
ORDER BY HIGH_SCORE DESC , AVERAGE_SCORE DESC, SCHOOL_NAME; -- 7.どう並べて表示させるか
